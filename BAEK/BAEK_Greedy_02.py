# 아이디어
# 1. 시작 시간 기준으로 정렬을 한다.
# 2. 종료 시간 기준으로 정렬을 한다. (시작 시간이 같다면 종료 시간이 짧은 것을 우선으로 나눠야 가장 많은 시간으로 나룰 수 있다.)
# 3. 시작하는 시간이 끝나는 시간보다 같거나 같다면 다음 시간이 되고 카운트를 늘린다.

li = []
for _ in range(int(input())):
    x, y = map(int,input().split())
    li.append([x, y])

# ex) input = [[8,14], [2,4], [1,2], [2,6], [8,10]]
# 시작 값을 기준으로 정렬
li.sort(key=lambda x: x[0])
# output = [[1, 2], [2, 4], [2, 6], [8, 14], [8, 10]]

# 다시 중료 값을 기준으로 정렬
li.sort(key=lambda x: x[1])
# output = [[1, 2], [2, 4], [2, 6], [8, 10], [8, 14]]
# 처음 시작 값을 기준으로 정렬된 값을 앞에서 정렬된 숫자는 그대로 두고 뒤에 숫자만 정리한다는 것을 알 수 있음

# key= lambda x: (x[0], x[1]) 사용하면 답을 틀리게 됨
# key= lambda x: (x[1], x[0]) 사용하면 답을 맞음

last = 0
count = 0
for i in li:
    # 만약 첫번째 시작 값이 종료 시간 보다 크거나 같으면 다음 종료 시간으로 선택 후 횟수 증가
    if i[0] >= last:
        count += 1
        last = i[1]
print(count)